{
  "stats": {
    "suites": 2,
    "tests": 25,
    "passes": 5,
    "pending": 0,
    "failures": 20,
    "start": "2024-07-28T22:18:31.683Z",
    "end": "2024-07-28T22:18:41.372Z",
    "duration": 9689,
    "testsRegistered": 25,
    "passPercent": 20,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0038771d-dfd4-40b5-8e39-ddbeda0fbdf1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2a63a995-4626-4724-82e8-fcb8d1b56402",
          "title": "Recurso Authors",
          "fullFile": "C:\\Projetos\\desafioWorkaLove\\e2e\\authors.spec.js",
          "file": "\\e2e\\authors.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Consultar lista de autores com sucesso",
              "fullTitle": "Recurso Authors Consultar lista de autores com sucesso",
              "timedOut": false,
              "duration": 1529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await BaseSteps.cadastrar(urlAuthor, author);\nlet consulta = await spec().get(urlAuthor);\nresposta = { json: consulta.json, statusCode: consulta.statusCode, statusMessage: consulta.statusMessage };\nBaseSteps.respostaOKEArrayNaoVazio(resposta);",
              "err": {},
              "uuid": "1608f87f-4151-4c08-a45d-90ee175cc48d",
              "parentUUID": "2a63a995-4626-4724-82e8-fcb8d1b56402",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Consultar livros por autor com sucesso",
              "fullTitle": "Recurso Authors Consultar livros por autor com sucesso",
              "timedOut": false,
              "duration": 488,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await BaseSteps.cadastrar(urlAuthor, author);\nresposta = await BaseSteps.consultar(`${urlAuthor}/authors/books`, author.idBook);\nBaseSteps.respostaOKEArrayNaoVazio(resposta);\nexpect(resposta.json).to.be.contain(author);",
              "err": {
                "message": "AssertionError: expected [ Array(2) ] to include Autor{ id: 1056, idBook: 104, …(2) }",
                "estack": "AssertionError: expected [ Array(2) ] to include Autor{ id: 1056, idBook: 104, …(2) }\n    at Context.<anonymous> (e2e\\authors.spec.js:28:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d5bcab1d-1de1-46db-a8e3-cbdc0ed88596",
              "parentUUID": "2a63a995-4626-4724-82e8-fcb8d1b56402",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Consultar livros por autor não encontrado",
              "fullTitle": "Recurso Authors Consultar livros por autor não encontrado",
              "timedOut": false,
              "duration": 234,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "resposta = await BaseSteps.consultar(`${urlAuthor}/authors/books`, 999);\n    BaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 404",
                "estack": "AssertionError: expected 200 to deeply equal 404\n    at BaseSteps.respostaNotFound (src\\util\\baseSteps.js:65:39)\n    at Context.<anonymous> (e2e\\authors.spec.js:34:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "feb4f344-12cc-47e1-be74-a2845451e6f4",
              "parentUUID": "2a63a995-4626-4724-82e8-fcb8d1b56402",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1608f87f-4151-4c08-a45d-90ee175cc48d"
          ],
          "failures": [
            "d5bcab1d-1de1-46db-a8e3-cbdc0ed88596",
            "feb4f344-12cc-47e1-be74-a2845451e6f4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2251,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d769e728-a62e-45d9-a961-04e5c66363b4",
          "title": "Recurso Books",
          "fullFile": "C:\\Projetos\\desafioWorkaLove\\e2e\\books.spec.js",
          "file": "\\e2e\\books.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Consultar todos os livros com sucesso",
              "fullTitle": "Recurso Books Consultar todos os livros com sucesso",
              "timedOut": false,
              "duration": 708,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await BaseSteps.cadastrar(urlBook, livro);\nlet consulta = await spec().get(urlBook);\nresposta = { json: consulta.json, statusCode: consulta.statusCode, statusMessage: consulta.statusMessage };\nBaseSteps.respostaOKEArrayNaoVazio(resposta);",
              "err": {},
              "uuid": "06980f21-baca-43cf-b29b-38ab6e6f3fef",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Consultar um livro com sucesso",
              "fullTitle": "Recurso Books Consultar um livro com sucesso",
              "timedOut": false,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "resposta = await BaseSteps.consultar(urlBook, 3);\nexpect(resposta.statusCode).to.be.eql(200);\nexpect(resposta.statusMessage).to.be.eql('OK');\nexpect(resposta.json).not.be.empty;",
              "err": {},
              "uuid": "13738337-c523-4e19-816d-399a5ea6875a",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Consultar um livro não encontrado",
              "fullTitle": "Recurso Books Consultar um livro não encontrado",
              "timedOut": false,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "resposta = await BaseSteps.consultar(urlBook, 999);\nBaseSteps.respostaNotFound(resposta);",
              "err": {},
              "uuid": "5186fc60-e307-4389-a6c0-f40786e1ede7",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro com sucesso",
              "fullTitle": "Recurso Books Criar um livro com sucesso",
              "timedOut": false,
              "duration": 471,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "resposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaOK(resposta, livro);\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id)\nBaseSteps.respostaOK(resposta, livro);",
              "err": {
                "message": "AssertionError: expected 404 to deeply equal 200",
                "estack": "AssertionError: expected 404 to deeply equal 200\n    at BaseSteps.respostaOK (src\\util\\baseSteps.js:43:39)\n    at Context.<anonymous> (e2e\\books.spec.js:45:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "81b133b6-6a67-4655-9d4a-e7c7cb23499a",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro informando identificador vinculado a outro livro cadastrado no sistema;",
              "fullTitle": "Recurso Books Criar um livro informando identificador vinculado a outro livro cadastrado no sistema;",
              "timedOut": false,
              "duration": 233,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.id = 1;\nresposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaBadRequest(resposta, 'Id vinculado a outro livro no sistema');\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id)\nBaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 400",
                "estack": "AssertionError: expected 200 to deeply equal 400\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:58:39)\n    at Context.<anonymous> (e2e\\books.spec.js:51:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "0490ad4e-ad62-4931-8e91-a8678fff048e",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro sem informar titulo",
              "fullTitle": "Recurso Books Criar um livro sem informar titulo",
              "timedOut": false,
              "duration": 233,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.title = \"\";\nresposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaBadRequest(resposta, 'Titulo é um campo obrigatório');\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id)\nBaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 400",
                "estack": "AssertionError: expected 200 to deeply equal 400\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:58:39)\n    at Context.<anonymous> (e2e\\books.spec.js:60:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "53fce3b1-a699-4572-8c94-a320a3a7567e",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro sem informar descrição",
              "fullTitle": "Recurso Books Criar um livro sem informar descrição",
              "timedOut": false,
              "duration": 493,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.description = \"\";\nresposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaOK(resposta, livro);\nexpect(resposta.json.description).to.be.empty;\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id)\nBaseSteps.respostaOK(resposta, livro);",
              "err": {
                "message": "AssertionError: expected { id: 1, title: 'Book 1', …(4) } to deeply equal { id: 1, title: '', …(4) }",
                "estack": "AssertionError: expected { id: 1, title: 'Book 1', …(4) } to deeply equal { id: 1, title: '', …(4) }\n    at BaseSteps.respostaOK (src\\util\\baseSteps.js:45:33)\n    at Context.<anonymous> (e2e\\books.spec.js:73:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": " {\n-   \"description\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\"\n-   \"excerpt\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\"\n+   \"description\": \"\"\n+   \"excerpt\": \"Percy está no labirinto em busca do raio de Zeus\"\n   \"id\": 1\n-   \"pageCount\": 100\n-   \"publishDate\": \"2024-07-27T22:18:38.1669668+00:00\"\n-   \"title\": \"Book 1\"\n+   \"pageCount\": 203\n+   \"publishDate\": \"2024-07-28T22:18:31.671Z\"\n+   \"title\": \"\"\n }\n"
              },
              "uuid": "972b7bad-e96e-4360-af14-405eb6cec93b",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro sem informar quantidade de páginas",
              "fullTitle": "Recurso Books Criar um livro sem informar quantidade de páginas",
              "timedOut": false,
              "duration": 233,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.pageCount = 0;\nresposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaBadRequest(resposta, 'PageCount é um campo obrigatório');\nexpect(resposta.json.pageCount).to.be.eq(0);\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nBaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 400",
                "estack": "AssertionError: expected 200 to deeply equal 400\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:58:39)\n    at Context.<anonymous> (e2e\\books.spec.js:79:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "191be960-830b-461e-9d98-0320ffccc2b8",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro sem informar um resumo",
              "fullTitle": "Recurso Books Criar um livro sem informar um resumo",
              "timedOut": false,
              "duration": 477,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.excerpt = \"\";\nresposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaOK(resposta, livro);\nexpect(resposta.json.excerpt).to.be.empty;\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id)\nBaseSteps.respostaOK(resposta, livro);",
              "err": {
                "message": "AssertionError: expected { id: 1, title: 'Book 1', …(4) } to deeply equal { id: 1, title: '', …(4) }",
                "estack": "AssertionError: expected { id: 1, title: 'Book 1', …(4) } to deeply equal { id: 1, title: '', …(4) }\n    at BaseSteps.respostaOK (src\\util\\baseSteps.js:45:33)\n    at Context.<anonymous> (e2e\\books.spec.js:93:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": " {\n-   \"description\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\"\n-   \"excerpt\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\nLorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\\n\"\n+   \"description\": \"\"\n+   \"excerpt\": \"\"\n   \"id\": 1\n-   \"pageCount\": 100\n-   \"publishDate\": \"2024-07-27T22:18:38.8941607+00:00\"\n-   \"title\": \"Book 1\"\n+   \"pageCount\": 0\n+   \"publishDate\": \"2024-07-28T22:18:31.671Z\"\n+   \"title\": \"\"\n }\n"
              },
              "uuid": "7ace6802-fce9-4a86-bce7-e007eaf7dee5",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro sem informar data de publicação",
              "fullTitle": "Recurso Books Criar um livro sem informar data de publicação",
              "timedOut": false,
              "duration": 480,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.publishDate = \"\";\nresposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaBadRequest(resposta, 'One or more validation errors occurred.');\nresposta = await BaseSteps.consultar(urlBook, livro.id);\nBaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 404",
                "estack": "AssertionError: expected 200 to deeply equal 404\n    at BaseSteps.respostaNotFound (src\\util\\baseSteps.js:65:39)\n    at Context.<anonymous> (e2e\\books.spec.js:102:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "59deda43-109c-4f83-b1ec-45a4e77b3aaa",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar um livro sem informar identificador",
              "fullTitle": "Recurso Books Criar um livro sem informar identificador",
              "timedOut": false,
              "duration": 234,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.id = 0;\nresposta = await BaseSteps.cadastrar(urlBook, livro);\nBaseSteps.respostaBadRequest(resposta, 'Id é um campo obrigátorio');\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nBaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 'One or more validation errors occurre…' to deeply equal 'Id é um campo obrigátorio'",
                "estack": "AssertionError: expected 'One or more validation errors occurre…' to deeply equal 'Id é um campo obrigátorio'\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:59:39)\n    at Context.<anonymous> (e2e\\books.spec.js:108:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- One or more validation errors occurred.\n+ Id é um campo obrigátorio\n"
              },
              "uuid": "30949f8f-53a5-43d4-80be-9c4cbf5c0336",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro com sucesso",
              "fullTitle": "Recurso Books Atualizar um livro com sucesso",
              "timedOut": false,
              "duration": 244,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.id = 200;\nresposta = await BaseSteps.atualizar(urlBook, livro);\nBaseSteps.respostaOK(resposta, livro);\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nBaseSteps.respostaOK(resposta, livro);",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 200",
                "estack": "AssertionError: expected 400 to deeply equal 200\n    at BaseSteps.respostaOK (src\\util\\baseSteps.js:43:39)\n    at Context.<anonymous> (e2e\\books.spec.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "9ad490f3-d165-4f05-8103-333fde9b41b2",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro informando identificador vinculado a outro livro cadastrado no sistema",
              "fullTitle": "Recurso Books Atualizar um livro informando identificador vinculado a outro livro cadastrado no sistema",
              "timedOut": false,
              "duration": 248,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.id = 200;\nlet atualizar = await spec()\n  .put(urlBook + `/${livro.id}`)\n  .withHeaders('Content-Type', 'application/json')\n  .withBody({\n    \"id\": 1,\n    \"title\": meuLivro.title,\n    \"description\": meuLivro.description,\n    \"pageCount\": meuLivro.pageCount,\n    \"excerpt\": meuLivro.excerpt,\n    \"publishDate\": meuLivro.publishDate\n  });\n  \nresposta = { json: atualizar.json, statusCode: atualizar.statusCode, statusMessage: atualizar.statusMessage };\nBaseSteps.respostaBadRequest(resposta, 'Id vinculado a outro livro no sistema');\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nexpect(resposta.statusCode).to.be.eql(200);\nexpect(resposta.statusMessage).to.be.eql('OK');\nexpect(resposta.json).not.be.eql(livro);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 400",
                "estack": "AssertionError: expected 200 to deeply equal 400\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:58:39)\n    at Context.<anonymous> (e2e\\books.spec.js:138:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "872d4398-f2ec-48fd-8b39-7e6b072f0f3c",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro sem informar titulo",
              "fullTitle": "Recurso Books Atualizar um livro sem informar titulo",
              "timedOut": false,
              "duration": 256,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.title = \"\";\nlivro.id = 200;\nresposta = await BaseSteps.atualizar(urlBook, livro);      \nBaseSteps.respostaBadRequest(resposta, 'titulo é um campo obtigatório');   \nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nexpect(resposta.statusCode).to.be.eql(200);\nexpect(resposta.statusMessage).to.be.eql('OK');\nexpect(resposta.json).not.be.eql(livro);",
              "err": {
                "message": "AssertionError: expected 'One or more validation errors occurre…' to deeply equal 'titulo é um campo obtigatório'",
                "estack": "AssertionError: expected 'One or more validation errors occurre…' to deeply equal 'titulo é um campo obtigatório'\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:59:39)\n    at Context.<anonymous> (e2e\\books.spec.js:150:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- One or more validation errors occurred.\n+ titulo é um campo obtigatório\n"
              },
              "uuid": "8baaf921-9382-4309-a486-676c3115ad63",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro sem informar descrição",
              "fullTitle": "Recurso Books Atualizar um livro sem informar descrição",
              "timedOut": false,
              "duration": 234,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.description = \"\";\nlivro.id = 200;\nresposta = await BaseSteps.atualizar(urlBook, livro);    \nBaseSteps.respostaOK(resposta, livro);   \nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nBaseSteps.respostaOK(resposta, livro)",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 200",
                "estack": "AssertionError: expected 400 to deeply equal 200\n    at BaseSteps.respostaOK (src\\util\\baseSteps.js:43:39)\n    at Context.<anonymous> (e2e\\books.spec.js:162:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "9e8c8162-29d4-41ea-9c3c-58934a366f0b",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro sem informar quantidades de páginas",
              "fullTitle": "Recurso Books Atualizar um livro sem informar quantidades de páginas",
              "timedOut": false,
              "duration": 234,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.pageCount = 0;\nlivro.id = 200;\nresposta = await BaseSteps.atualizar(urlBook, livro);    \nBaseSteps.respostaBadRequest(resposta, 'PageCount é um campo obrigatório');   \nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nexpect(resposta.statusCode).to.be.eql(200);\nexpect(resposta.statusMessage).to.be.eql('OK');\nexpect(resposta.json).not.be.eql(livro);",
              "err": {
                "message": "AssertionError: expected 'One or more validation errors occurre…' to deeply equal 'PageCount é um campo obrigatório'",
                "estack": "AssertionError: expected 'One or more validation errors occurre…' to deeply equal 'PageCount é um campo obrigatório'\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:59:39)\n    at Context.<anonymous> (e2e\\books.spec.js:172:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- One or more validation errors occurred.\n+ PageCount é um campo obrigatório\n"
              },
              "uuid": "c46cbc1b-3957-4224-b3b9-7462bbbc1d28",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro sem informar um resumo",
              "fullTitle": "Recurso Books Atualizar um livro sem informar um resumo",
              "timedOut": false,
              "duration": 239,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.excerpt = \"\";\nlivro.id = 200;\nresposta = await BaseSteps.atualizar(urlBook, livro);  \nBaseSteps.respostaOK(resposta, livro);   \nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nBaseSteps.respostaOK(resposta, livro);",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 200",
                "estack": "AssertionError: expected 400 to deeply equal 200\n    at BaseSteps.respostaOK (src\\util\\baseSteps.js:43:39)\n    at Context.<anonymous> (e2e\\books.spec.js:184:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "f65b8be6-2ce1-4230-828a-c846e274816f",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro sem data de publicação",
              "fullTitle": "Recurso Books Atualizar um livro sem data de publicação",
              "timedOut": false,
              "duration": 476,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "livro.publishDate = \"\";\nlivro.id = 200;\nresposta = await BaseSteps.atualizar(urlBook, livro);  \nBaseSteps.respostaBadRequest(resposta, 'One or more validation errors occurred.');   \nresposta = await BaseSteps.consultar(urlBook, livro.id);\nexpect(resposta.statusCode).to.be.eql(200);\nexpect(resposta.statusMessage).to.be.eql('OK');\nexpect(resposta.json).not.be.eql(livro);",
              "err": {},
              "uuid": "836160de-0221-47c7-a2ab-f7019b1a1459",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro sem identificador;",
              "fullTitle": "Recurso Books Atualizar um livro sem identificador;",
              "timedOut": false,
              "duration": 235,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.id = 200;\nlet atualizar = await spec()\n  .put(urlBook + `/${livro.id}`)\n  .withHeaders('Content-Type', 'application/json')\n  .withBody({\n    \"id\": 0,\n    \"title\": meuLivro.title,\n    \"description\": meuLivro.description,\n    \"pageCount\": meuLivro.pageCount,\n    \"excerpt\": meuLivro.excerpt,\n    \"publishDate\": meuLivro.publishDate\n  });\n  \nresposta = { json: atualizar.json, statusCode: atualizar.statusCode, statusMessage: atualizar.statusMessage };\nBaseSteps.respostaBadRequest(resposta, 'Id é um campo obrigatório');\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nexpect(resposta.statusCode).to.be.eql(200);\nexpect(resposta.statusMessage).to.be.eql('OK');\nexpect(resposta.json).not.be.eql(livro);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 400",
                "estack": "AssertionError: expected 200 to deeply equal 400\n    at BaseSteps.respostaBadRequest (src\\util\\baseSteps.js:58:39)\n    at Context.<anonymous> (e2e\\books.spec.js:217:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "6143bcf8-312f-4804-9552-42cff8c927d1",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar um livro não encontrado;",
              "fullTitle": "Recurso Books Atualizar um livro não encontrado;",
              "timedOut": false,
              "duration": 237,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "livro.id = 202;\nresposta = await BaseSteps.atualizar(urlBook, livro);\nBaseSteps.respostaNotFound(resposta);\nresposta = await BaseSteps.consultar(urlBook, resposta.json.id);\nexpect(resposta.statusCode).to.be.eql(200);\nexpect(resposta.statusMessage).to.be.eql('OK');\nexpect(resposta.json).not.be.eql(livro);",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 404",
                "estack": "AssertionError: expected 400 to deeply equal 404\n    at BaseSteps.respostaNotFound (src\\util\\baseSteps.js:65:39)\n    at Context.<anonymous> (e2e\\books.spec.js:228:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 404\n"
              },
              "uuid": "0b63935b-ce11-4f3f-bd40-4bf85afcf221",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remover um livro com sucesso",
              "fullTitle": "Recurso Books Remover um livro com sucesso",
              "timedOut": false,
              "duration": 729,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let consulta = await spec().get(urlBook);\nresposta = { json: consulta.json, statusCode: consulta.statusCode, statusMessage: consulta.statusMessage };\nconst totalBooks = resposta.json.length;\nconst bookAleatorio = Math.floor(Math.random() * totalBooks);\nresposta = await BaseSteps.deletar(urlBook, bookAleatorio);\nresposta = await BaseSteps.consultar(urlBook, bookAleatorio);\nBaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 404",
                "estack": "AssertionError: expected 200 to deeply equal 404\n    at BaseSteps.respostaNotFound (src\\util\\baseSteps.js:65:39)\n    at Context.<anonymous> (e2e\\books.spec.js:245:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "5b863a37-e737-498c-ad5e-5bbc0d621f48",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remover um livro não encontrado",
              "fullTitle": "Recurso Books Remover um livro não encontrado",
              "timedOut": false,
              "duration": 232,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const bookIdentificador = 999;\nresposta = await BaseSteps.deletar(urlBook, bookIdentificador);\nBaseSteps.respostaNotFound(resposta);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 404",
                "estack": "AssertionError: expected 200 to deeply equal 404\n    at BaseSteps.respostaNotFound (src\\util\\baseSteps.js:65:39)\n    at Context.<anonymous> (e2e\\books.spec.js:250:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "2ff7ed6e-6d9c-4a28-983f-8c15f990bdc5",
              "parentUUID": "d769e728-a62e-45d9-a961-04e5c66363b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06980f21-baca-43cf-b29b-38ab6e6f3fef",
            "13738337-c523-4e19-816d-399a5ea6875a",
            "5186fc60-e307-4389-a6c0-f40786e1ede7",
            "836160de-0221-47c7-a2ab-f7019b1a1459"
          ],
          "failures": [
            "81b133b6-6a67-4655-9d4a-e7c7cb23499a",
            "0490ad4e-ad62-4931-8e91-a8678fff048e",
            "53fce3b1-a699-4572-8c94-a320a3a7567e",
            "972b7bad-e96e-4360-af14-405eb6cec93b",
            "191be960-830b-461e-9d98-0320ffccc2b8",
            "7ace6802-fce9-4a86-bce7-e007eaf7dee5",
            "59deda43-109c-4f83-b1ec-45a4e77b3aaa",
            "30949f8f-53a5-43d4-80be-9c4cbf5c0336",
            "9ad490f3-d165-4f05-8103-333fde9b41b2",
            "872d4398-f2ec-48fd-8b39-7e6b072f0f3c",
            "8baaf921-9382-4309-a486-676c3115ad63",
            "9e8c8162-29d4-41ea-9c3c-58934a366f0b",
            "c46cbc1b-3957-4224-b3b9-7462bbbc1d28",
            "f65b8be6-2ce1-4230-828a-c846e274816f",
            "6143bcf8-312f-4804-9552-42cff8c927d1",
            "0b63935b-ce11-4f3f-bd40-4bf85afcf221",
            "5b863a37-e737-498c-ad5e-5bbc0d621f48",
            "2ff7ed6e-6d9c-4a28-983f-8c15f990bdc5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7414,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report"
      },
      "version": "6.2.0"
    }
  }
}